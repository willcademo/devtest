<?xml version="1.0" ?>

<VSModel name="demo" version="5">

<meta>
   <create version="6.0.10" buildNumber="6.0.10.10" author="wt07201" date="08/16/2012" host="ad1hfdcto702" />
   <lastEdited version="10.3.0" buildNumber="10.3.0.297" author="admin" date="07/25/2018" host="truwi01mac1448" />
</meta>

<id>33363764346537642D396531322D3435</id>
<IsInProject>true</IsInProject>
<sig>ZWQ9NSZ0Y3Y9NSZsaXNhdj0xMC4zLjAgKDEwLjMuMC4yOTcpJm5vZGVzPS05NTAzNzk4Njk=</sig>
<subprocess>false</subprocess>

<initState>
</initState>

<resultState>
</resultState>

<deletedProps>
</deletedProps>

    <Node name="Virtual HTTPS Listener 8002" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpListenStep" 
          version="1" 
          uid="null" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="VS Image Response Selection" > 


      <!-- Filters -->
      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.rest.RestDataProtocol</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<requestSideUnparsed>true</requestSideUnparsed>
<rules>
<rule>
<operation>POST /catalog/stbr/</operation>
</rule>
</rules>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.common.datahandler.XMLPayloadParserDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<source set="request_body"/><actions>
<action set="argument" name="req_pack_cmd_cat_text_">
<query>/req_pack/cmd_cat/text()</query>
<map>
<entry name=""></entry>
</map>
</action>
<action set="argument" name="req_pack_cmd_text_">
<query>/req_pack/cmd/text()</query>
<map>
<entry name=""></entry>
</map>
</action>
<action set="argument" name="req_pack_features_text_">
<query>/req_pack/features/text()</query>
<map>
<entry name=""></entry>
</map>
</action>
<action set="attribute" name="original_req_body">
<query>/*</query>
<map>
</map>
</action>
<action set="request_body">
<query>/req_pack/vod_search_req</query>
<map>
<entry name=""></entry>
</map>
</action>
</actions>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.scriptable.ScriptableDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<updateRequestScript><![CDATA[
FVOD_OPEN_TAG = "<fvod_ids>";
FVOD_CLOSE_TAG = "</fvod_ids>";
body = lisa_vse_request.getBodyAsString();
if (body != null) {
    index0 = body.indexOf(FVOD_OPEN_TAG);
    index1 = body.indexOf(FVOD_CLOSE_TAG);
    if (index0 != -1) {
        body0 = body.substring(0, index0);
        body1 = body.substring(index1+FVOD_CLOSE_TAG.length(), body.length());
        lisa_vse_request.setBody(body0 + body1);
    }
}
]]></updateRequestScript>
</CustomFilterData>
      </Filter>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<listenPort>8003</listenPort>
<bindAddress></bindAddress>
<basePath>/demo</basePath>
<bindOnly>false</bindOnly>
<useSSL>false</useSSL>
<sslClientAuthType>none</sslClientAuthType>
    </Node>


    <Node name="VS Image Response Selection" log=""
          type="com.itko.lisa.vse.stateful.ConversationalStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-VS+Image+Response+Selection" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Virtual Service Execution Router" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to HTTP/S Live Invocation</log>
<then>HTTP/S Live Invocation</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Transaction Tracking, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>TRACK</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If efficient" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Most Efficient, branching to HTTP/S Respond directly</log>
<then>HTTP/S Respond</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>EFFICIENT</executionMode>
</CheckResult>

<vsiSource>{{LISA_PROJ_ROOT}}/VirtualServices/Images/demo.vsi</vsiSource>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual Service Execution Router" log=""
          type="com.itko.lisa.vse.stateful.VSRouterStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-Virtual+Service+Router" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="HTTP/S Respond" > 

<onerror>abort</onerror>
<script>// This script must return either an enum entry from ExecutionMode or&#10;// a string that is the name of an enum entry.  The DYNAMIC entry may&#10;// not be returned.  It will be executed for DYNAMIC execution mode&#10;// only.&#10;import com.itko.lisa.vse.ExecutionMode;&#10;import java.util.ArrayList;&#10;import com.itko.lisa.vse.stateful.model.TransientResponse;&#10;import com.itko.util.ParameterList;&#10;import com.itko.util.Parameter;&#10;&#10;responseList = testExec.getStateObject(&quot;lisa.vse.response&quot;);&#10;// Loop through responses and check for 404 response codes&#10;for (int i = 0; i &lt; responseList.size(); i++) {&#10;    TransientResponse response = responseList.get(i);&#10;    if (response != null) {&#10;        ParameterList metaData = response.getMetaData();&#10;        Parameter responseCode = metaData.getParameter(&quot;HTTP-Response-Code&quot;);&#10;        if (responseCode != null &amp;&amp; &quot;404&quot;.equals(responseCode.getValue())) {&#10;            return ExecutionMode.LIVE;&#10;        }&#10;    }&#10;}&#10;return ExecutionMode.EFFICIENT;&#10;</script>
<liveInvocationStep>HTTP/S Live Invocation</liveInvocationStep>
    </Node>


    <Node name="HTTP/S Respond" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpRespondStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-HTTP%2FS+Respond" 
          think="0" 
          useFilters="true" 
          quiet="false" 
          next="Virtual HTTPS Listener 8002" > 

<responseList>lisa.vse.response</responseList>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="Virtual Service Tracking" log=""
          type="com.itko.lisa.vse.stateful.VSTrackingStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-Virtual+Service+Tracking" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="HTTP/S Respond" > 

<imageResponseProperty>lisa.vse.image.response</imageResponseProperty>
<liveResponseProperty>lisa.vse.live.response</liveResponseProperty>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node name="HTTP/S Live Invocation" log=""
          type="com.itko.lisa.vse.stateful.protocol.http.HttpLiveInvocationStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-HTTP%2FS+Live+Invocation" 
          think="0" 
          useFilters="true" 
          quiet="true" 
          next="Log Live Traffic" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey></valueToAssertKey>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<targetServer>{{LIVE_INVOCATION_SERVER}}</targetServer>
<targetPort>{{LIVE_INVOCATION_PORT}}</targetPort>
<hostHeaderPassThrough>false</hostHeaderPassThrough>
<useSSLToServer>false</useSSLToServer>
<useSSL>false</useSSL>
    </Node>


    <Node name="Log Live Traffic" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          uid="33363764346537642D396531322D3435-Log+Live+Traffic" 
          think="500-1S" 
          useFilters="true" 
          quiet="false" 
          next="HTTP/S Respond" > 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<onerror>abort</onerror>
<script>import java.io.*;&#10;import java.util.Date;&#10;import com.itko.lisa.vse.stateful.model.TransientResponse;&#10;&#10;if (&quot;true&quot;.equals(testExec.getStateObject(&quot;LOG_LIVE_TRAFFIC&quot;))) {&#10;    // Get request operation and body&#10;    request = testExec.getStateObject(&quot;lisa.vse.request&quot;);&#10;    String operation = request.getOperation();&#10;    //String requestText = request.getBodyText();&#10;    String requestText = testExec.getStateValue(&quot;original_req_body&quot;);&#10;&#10;    // Get response body&#10;    responseList = testExec.getStateObject(&quot;lisa.vse.response&quot;);&#10;    String responseText = &quot;&quot;;&#10;    for (int i = 0; i &lt; responseList.size(); i++) {&#10;        TransientResponse response = responseList.get(i);&#10;        responseText = responseText + response.getBodyText() + &quot;\r\n&quot;;&#10;    }&#10;&#10;    // Set log directory and filename&#10;    String directory = testExec.getStateValue(&quot;VSE_LOG_DIR&quot;);&#10;    String fileName = &quot;catalogserver_payload&quot; + &quot;_&quot; + new Date().getTime();&#10;    Writer writer = null;&#10;    FileWriter fw = null;&#10;&#10;    // Logging request and response to file&#10;    if (operation != null &amp;&amp; directory != null &amp;&amp; fileName != null) {&#10;        File dir = new File(directory);&#10;        if (! dir.isDirectory()) {&#10;           dir.mkdirs();&#10;        }&#10;&#9;&#9;// Write request file&#10;        File file = new File(directory + &quot;/&quot; + fileName + &quot;-req.txt&quot;);&#10;        file.createNewFile();&#10;        fw = new FileWriter(file, true);&#10;        writer = new BufferedWriter(fw);&#10;        if (operation != null) {&#10;            writer.write(operation);&#10;            writer.write(&quot;\r\n\r\n&quot;);&#10;        }&#10;        if (requestText != null) {&#10;            writer.write(requestText);&#10;        }&#10;&#9;&#9;writer.close();&#10;&#9;&#9;fw.close();&#10;&#9;&#9;&#10;&#9;&#9;// Write response file&#10;&#9;&#9;file = new File(directory + &quot;/&quot; + fileName + &quot;-rsp.txt&quot;);&#10;        file.createNewFile();&#10;        fw = new FileWriter(file, true);&#10;        writer = new BufferedWriter(fw);&#10;        if (responseText != null) {&#10;            writer.write(responseText);&#10;        }&#10;&#9;&#9;writer.close();&#10;&#9;&#9;fw.close();&#10;        &#10;        return &quot;Request/Response written to: &quot; + directory + &quot;\nFilename: &quot; + fileName;&#10;    }&#10;} else {&#10;    return &quot;Pass through logging is disabled.&quot;;&#10;}</script>
    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          uid="33363764346537642D396531322D3435-end" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          uid="33363764346537642D396531322D3435-fail" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


    <Node name="abort" log="The test was aborted"
          type="com.itko.lisa.test.AbortStep" 
          version="1" 
          uid="33363764346537642D396531322D3435-abort" 
          think="0h" 
          useFilters="true" 
          quiet="true" 
          next="fail" > 

    </Node>


</VSModel>
