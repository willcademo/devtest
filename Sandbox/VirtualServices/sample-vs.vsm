<?xml version="1.0" encoding="UTF-8"?>
<VSModel name="sample-vs" version="5">

<meta>
   <create author="wt07201" buildNumber="6.0.10.10" date="08/16/2012" host="ad1hfdcto702" version="6.0.10"/>
   <lastEdited author="wtruong" buildNumber="7.5.2.235" date="01/08/2015" host="Williams-MacBook-Pro.local" version="7.5.2"/>
</meta>

<id>33363764346537642D396531322D3435</id>
<IsInProject>true</IsInProject>
<sig>ZWQ9MyZ0Y3Y9NSZsaXNhdj03LjUuMiAoNy41LjIuMjM1KSZub2Rlcz0tOTUwMzc5ODY5</sig>
<subprocess>false</subprocess>

<initState>
</initState>

<resultState>
</resultState>

<deletedProps>
</deletedProps>

    <Node log="" name="Virtual HTTPS Listener 8002" next="VS Image Response Selection" quiet="true" think="0" type="com.itko.lisa.vse.stateful.protocol.http.HttpListenStep" uid="null" useFilters="true" version="1"> 


      <!-- Filters -->
      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.rest.RestDataProtocol</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<requestSideUnparsed>true</requestSideUnparsed>
<rules>
<rule>
<operation>POST /catalog/stbr/</operation>
</rule>
</rules>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.common.datahandler.XMLPayloadParserDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<source set="request_body"/><actions>
<action name="req_pack_cmd_cat_text_" set="argument">
<query>/req_pack/cmd_cat/text()</query>
<map>
<entry name=""/>
</map>
</action>
<action name="req_pack_cmd_text_" set="argument">
<query>/req_pack/cmd/text()</query>
<map>
<entry name=""/>
</map>
</action>
<action name="req_pack_features_text_" set="argument">
<query>/req_pack/features/text()</query>
<map>
<entry name=""/>
</map>
</action>
<action name="original_req_body" set="attribute">
<query>/*</query>
<map>
</map>
</action>
<action set="request_body">
<query>/req_pack/vod_search_req</query>
<map>
<entry name=""/>
</map>
</action>
</actions>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.stateful.protocol.scriptable.ScriptableDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
<updateRequestScript><![CDATA[
FVOD_OPEN_TAG = "<fvod_ids>";
FVOD_CLOSE_TAG = "</fvod_ids>";
body = lisa_vse_request.getBodyAsString();
if (body != null) {
    index0 = body.indexOf(FVOD_OPEN_TAG);
    index1 = body.indexOf(FVOD_CLOSE_TAG);
    if (index0 != -1) {
        body0 = body.substring(0, index0);
        body1 = body.substring(index1+FVOD_CLOSE_TAG.length(), body.length());
        lisa_vse_request.setBody(body0 + body1);
    }
}
]]></updateRequestScript>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.ext.xml.ElementXmlDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
</CustomFilterData>
      </Filter>

      <Filter type="com.itko.lisa.vse.stateful.common.DataProtocolFilter">
        <valueToFilterKey>lisa.vse.request</valueToFilterKey>
<dataProtocol>com.itko.lisa.vse.ext.xml.AttributeXmlDataProtocolHandler</dataProtocol>
<processRequests>true</processRequests>
<processResponses>false</processResponses>
<CustomFilterData>
</CustomFilterData>
      </Filter>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<listenPort>8002</listenPort>
<basePath>/catalog/stbr</basePath>
<bindOnly>false</bindOnly>
<useSSL>false</useSSL>
    </Node>


    <Node log="" name="VS Image Response Selection" next="Virtual Service Execution Router" quiet="true" think="0" type="com.itko.lisa.vse.stateful.ConversationalStep" uid="33363764346537642D396531322D3435-VS+Image+Response+Selection" useFilters="true" version="1"> 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to HTTP/S Live Invocation</log>
<then>HTTP/S Live Invocation</then>
<valueToAssertKey/>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If tracking" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Transaction Tracking, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey/>
        <executionMode>TRACK</executionMode>
</CheckResult>

<CheckResult assertTrue="true" name="If efficient" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Most Efficient, branching to HTTP/S Respond directly</log>
<then>HTTP/S Respond</then>
<valueToAssertKey/>
        <executionMode>EFFICIENT</executionMode>
</CheckResult>

<vsiSource>{{LISA_PROJ_ROOT}}/VirtualServices/Images/STB_CatalogServer_REST_XML.vsi</vsiSource>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node log="" name="Virtual Service Execution Router" next="HTTP/S Respond" quiet="true" think="0" type="com.itko.lisa.vse.stateful.VSRouterStep" uid="33363764346537642D396531322D3435-Virtual+Service+Router" useFilters="true" version="1"> 

<onerror>abort</onerror>
<script>// This script must return either an enum entry from ExecutionMode or
// a string that is the name of an enum entry.  The DYNAMIC entry may
// not be returned.  It will be executed for DYNAMIC execution mode
// only.
import com.itko.lisa.vse.ExecutionMode;
import java.util.ArrayList;
import com.itko.lisa.vse.stateful.model.TransientResponse;
import com.itko.util.ParameterList;
import com.itko.util.Parameter;

responseList = testExec.getStateObject("lisa.vse.response");
// Loop through responses and check for 404 response codes
for (int i = 0; i &lt; responseList.size(); i++) {
    TransientResponse response = responseList.get(i);
    if (response != null) {
        ParameterList metaData = response.getMetaData();
        Parameter responseCode = metaData.getParameter("HTTP-Response-Code");
        if (responseCode != null &amp;&amp; "404".equals(responseCode.getValue())) {
            return ExecutionMode.LIVE;
        }
    }
}
return ExecutionMode.EFFICIENT;
</script>
<liveInvocationStep>HTTP/S Live Invocation</liveInvocationStep>
    </Node>


    <Node log="" name="HTTP/S Respond" next="Virtual HTTPS Listener 8002" quiet="false" think="0" type="com.itko.lisa.vse.stateful.protocol.http.HttpRespondStep" uid="33363764346537642D396531322D3435-HTTP%2FS+Respond" useFilters="true" version="1"> 

<responseList>lisa.vse.response</responseList>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node log="" name="Virtual Service Tracking" next="HTTP/S Respond" quiet="true" think="0" type="com.itko.lisa.vse.stateful.VSTrackingStep" uid="33363764346537642D396531322D3435-Virtual+Service+Tracking" useFilters="true" version="1"> 

<imageResponseProperty>lisa.vse.image.response</imageResponseProperty>
<liveResponseProperty>lisa.vse.live.response</liveResponseProperty>
<onExceptionStep>abort</onExceptionStep>
    </Node>


    <Node log="" name="HTTP/S Live Invocation" next="Log Live Traffic" quiet="true" think="0" type="com.itko.lisa.vse.stateful.protocol.http.HttpLiveInvocationStep" uid="33363764346537642D396531322D3435-HTTP%2FS+Live+Invocation" useFilters="true" version="1"> 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="If validating" type="com.itko.lisa.vse.stateful.AssertOnExecutionMode">
<log>Current execution mode is Image Validation, branching to Virtual Service Tracking</log>
<then>Virtual Service Tracking</then>
<valueToAssertKey/>
        <executionMode>VALIDATION</executionMode>
</CheckResult>

<outputAsObject>true</outputAsObject>
<onExceptionStep>abort</onExceptionStep>
<requestPropertyName>lisa.vse.request</requestPropertyName>
<targetServer>{{LIVE_INVOCATION_SERVER}}</targetServer>
<targetPort>{{LIVE_INVOCATION_PORT}}</targetPort>
<hostHeaderPassThrough>false</hostHeaderPassThrough>
<useSSLToServer>false</useSSLToServer>
<useSSL>false</useSSL>
    </Node>


    <Node log="" name="Log Live Traffic" next="HTTP/S Respond" quiet="false" think="500-1S" type="com.itko.lisa.test.ScriptNode" uid="33363764346537642D396531322D3435-Log+Live+Traffic" useFilters="true" version="1"> 


      <!-- Assertions -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey/>
        <param>.*</param>
</CheckResult>

<onerror>abort</onerror>
<script>import java.io.*;
import java.util.Date;
import com.itko.lisa.vse.stateful.model.TransientResponse;

if ("true".equals(testExec.getStateObject("LOG_LIVE_TRAFFIC"))) {
    // Get request operation and body
    request = testExec.getStateObject("lisa.vse.request");
    String operation = request.getOperation();
    //String requestText = request.getBodyText();
    String requestText = testExec.getStateValue("original_req_body");

    // Get response body
    responseList = testExec.getStateObject("lisa.vse.response");
    String responseText = "";
    for (int i = 0; i &lt; responseList.size(); i++) {
        TransientResponse response = responseList.get(i);
        responseText = responseText + response.getBodyText() + "\r\n";
    }

    // Set log directory and filename
    String directory = testExec.getStateValue("VSE_LOG_DIR");
    String fileName = "catalogserver_payload" + "_" + new Date().getTime();
    Writer writer = null;
    FileWriter fw = null;

    // Logging request and response to file
    if (operation != null &amp;&amp; directory != null &amp;&amp; fileName != null) {
        File dir = new File(directory);
        if (! dir.isDirectory()) {
           dir.mkdirs();
        }
		// Write request file
        File file = new File(directory + "/" + fileName + "-req.txt");
        file.createNewFile();
        fw = new FileWriter(file, true);
        writer = new BufferedWriter(fw);
        if (operation != null) {
            writer.write(operation);
            writer.write("\r\n\r\n");
        }
        if (requestText != null) {
            writer.write(requestText);
        }
		writer.close();
		fw.close();
		
		// Write response file
		file = new File(directory + "/" + fileName + "-rsp.txt");
        file.createNewFile();
        fw = new FileWriter(file, true);
        writer = new BufferedWriter(fw);
        if (responseText != null) {
            writer.write(responseText);
        }
		writer.close();
		fw.close();
        
        return "Request/Response written to: " + directory + "\nFilename: " + fileName;
    }
} else {
    return "Pass through logging is disabled.";
}</script>
    </Node>


    <Node log="" name="end" next="fail" quiet="true" think="0h" type="com.itko.lisa.test.NormalEnd" uid="33363764346537642D396531322D3435-end" useFilters="true" version="1"> 

    </Node>


    <Node log="" name="fail" next="fail" quiet="true" think="0h" type="com.itko.lisa.test.Abend" uid="33363764346537642D396531322D3435-fail" useFilters="true" version="1"> 

    </Node>


    <Node log="The test was aborted" name="abort" next="fail" quiet="true" think="0h" type="com.itko.lisa.test.AbortStep" uid="33363764346537642D396531322D3435-abort" useFilters="true" version="1"> 

    </Node>


</VSModel>